import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, X, Send } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { cn } from '@/lib/utils';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
}

export const ChatbotWidget = () => {
  const { toast } = useToast();
  const [isOpen, setIsOpen] = useState(false);
  const [sessionId] = useState(() => `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Szia! √ân vagyok az AI Talks asszisztensed! ü§ñ Sz√≠vesen seg√≠tek a konferenci√°val kapcsolatos k√©rd√©sekben. Miben seg√≠thetek?',
      isBot: true,
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [followupHistory, setFollowupHistory] = useState<string[]>([]);
  const [ticketMentionCounter, setTicketMentionCounter] = useState(0);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Get AI response using Gemini
    setTimeout(async () => {
      try {
        // Update ticket mention counter here before getting response
        setTicketMentionCounter(prev => prev + 1);
        
        const responseText = await getAIResponse(inputValue);
        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: responseText,
          isBot: true,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, botMessage]);
        
        // Log the interaction
        await logInteraction(inputValue, responseText);
      } catch (error) {
        console.error('Error getting AI response:', error);
        const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: 'Eln√©z√©st, pillanatnyilag nem tudok v√°laszolni. K√©rlek, pr√≥b√°ld √∫jra k√©s≈ëbb! üîÑ',
          isBot: true,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, errorMessage]);
        
        // Log the error interaction
        await logInteraction(inputValue, errorMessage.text);
      } finally {
        setIsTyping(false);
      }
    }, 1500);
  };

  const logInteraction = async (question: string, answer: string) => {
    try {
      await supabase.from('chatbot_interactions').insert({
        session_id: sessionId,
        question,
        answer,
        page_url: window.location.href,
        user_agent: navigator.userAgent,
        referrer: document.referrer || null,
        metadata: {
          component: 'ChatbotWidget',
          timestamp: new Date().toISOString()
        }
      });
    } catch (error) {
      console.error('Failed to log interaction:', error);
    }
  };

  const detectTopic = (userInput: string): string => {
    const input = userInput.toLowerCase();
    if (input.includes('program') || input.includes('menetrend') || input.includes('id≈ëpont') || input.includes('mikor')) return 'program';
    if (input.includes('workshop') || input.includes('m≈±hely') || input.includes('gyakorlat')) return 'workshop';
    if (input.includes('helysz√≠n') || input.includes('hol') || input.includes('c√≠m') || input.includes('b√°lna')) return 'location';
    if (input.includes('parkol') || input.includes('parkol√≥') || input.includes('m√©lygar√°zs')) return 'parking';
    if (input.includes('√©tterem') || input.includes('eb√©d') || input.includes('vacsora')) return 'restaurant';
    if (input.includes('jegy') || input.includes('√°r') || input.includes('k√∂lts√©g') || input.includes('mennyibe')) return 'ticket';
    if (input.includes('el≈ëad√≥') || input.includes('speaker') || input.includes('ki besz√©l')) return 'speaker';
    if (input.includes('dress') || input.includes('√∂lt√∂zet') || input.includes('ruha')) return 'dress';
    if (input.includes('networking') || input.includes('kapcsolat') || input.includes('ismerked√©s')) return 'networking';
    return 'general';
  };

  const getFollowUpQuestion = (topic: string, usedFollowups: string[]): string => {
    const followups = {
      program: ["Melyik el≈ëad√°s √©rdekel legink√°bb?", "K√©rsz r√©szletet valamelyik workshopr√≥l?", "Seg√≠tsek id≈ëbeoszt√°st tervezni?"],
      workshop: ["Melyik t√©mak√∂r lenne sz√°modra legink√°bb hasznos?", "K√©rd√©sek vannak a gyakorlati r√©szekkel kapcsolatban?", "√ârdekel m√°s workshop is?"],
      location: ["Seg√≠tsek √∫tvonalat tervezni?", "Kell parkol√°si tipp is?", "√ârdekl≈ëdn√©l k√∂zleked√©si inf√≥ ir√°nt?"],
      parking: ["Seg√≠tsek d√∂nteni a parkol√°si opci√≥ban?", "K√©rsz √∫tvonal-tippet is?", "√ârdekel a k√∂z√∂ss√©gi k√∂zleked√©s is?"],
      restaurant: ["Foglaljak asztalt valahol?", "Kell allerg√©n inform√°ci√≥?", "√ârdekel m√©g m√°s k√∂rny√©kbeli hely?"],
      ticket: ["Melyik jegyt√≠pus lenne ide√°lis sz√°modra?", "K√©rsz r√©szleteket a VIP el≈ëny√∂kr≈ël?", "Seg√≠tsek c√©ges elsz√°mol√°sban?"],
      speaker: ["K√©rsz r√©szleteket valamelyik el≈ëad√°sr√≥l?", "√ârdekel valamelyik el≈ëad√≥ h√°ttere?", "Melyik t√©mak√∂r vonz√≥?"],
      dress: ["Kell konkr√©t √∂lt√∂zk√∂d√©si tipp?", "Vannak k√©rd√©sek a business casual-lel kapcsolatban?", "Seg√≠tsek outfit √∂tletekkel?"],
      networking: ["√ârdekel a VIP networking?", "K√©rsz tippeket az ismerked√©shez?", "Seg√≠tsek strat√©gi√°t tervezni?"],
      general: ["Miben tudok m√©g seg√≠teni?", "Van m√°s k√©rd√©s?", "√ârdekel valami konkr√©t t√©ma?"]
    };

    const options = followups[topic as keyof typeof followups] || followups.general;
    const available = options.filter(option => !usedFollowups.includes(option));
    return available.length > 0 ? available[Math.floor(Math.random() * available.length)] : options[0];
  };

  const getAIResponse = async (userInput: string): Promise<string> => {
    try {
      const topic = detectTopic(userInput);
      const history = messages.slice(-3).map(m => ({ text: m.text, isBot: m.isBot }));
      
      const { data, error } = await supabase.functions.invoke('gemini-chat', {
        body: { 
          message: userInput,
          history,
          topic_hint: topic,
          last_followups: followupHistory.slice(-5)
        }
      });

      if (error) {
        console.error('Supabase function error:', error);
        return getFallbackResponse(userInput, topic);
      }

      // Check for rate limit or payment errors
      if (data?.error === 'rate_limited' || data?.status === 429) {
        toast({
          title: "T√∫l sok k√©r√©s",
          description: "K√©rlek, v√°rj egy kicsit miel≈ëtt √∫jra k√©rdezel. üôè",
          variant: "destructive",
        });
        return "R√∂vid id≈ën bel√ºl t√∫l sok k√©rd√©st tett√©l fel. K√©rlek, v√°rj egy percet √©s pr√≥b√°ld √∫jra! üòä";
      }

      if (data?.error === 'payment_required' || data?.status === 402) {
        toast({
          title: "El√©rted a limitet",
          description: "Az AI haszn√°lati keret kimer√ºlt. K√©rlek, pr√≥b√°ld k√©s≈ëbb!",
          variant: "destructive",
        });
        return "Az AI szolg√°ltat√°s √°tmenetileg nem √©rhet≈ë el. K√©rlek, pr√≥b√°ld meg k√©s≈ëbb! üôè";
      }

      return data?.response || getFallbackResponse(userInput, topic);
    } catch (error) {
      console.error('Error calling Gemini:', error);
      return getFallbackResponse(userInput, detectTopic(userInput));
    }
  };

  const getFallbackResponse = (userInput: string, topic: string): string => {
    const input = userInput.toLowerCase();
    
    // Use current counter value without updating it here
    const shouldMentionTickets = ticketMentionCounter % 5 === 0;

    // Program / id≈ëpont
    if (input.includes('program') || input.includes('menetrend') || input.includes('id≈ëpont') || input.includes('mikor')) {
      const responses = [
        'A konferencia november 20-√°n lesz Budapesten. D√©lel≈ëtt el≈ëad√°sok, d√©lut√°n workshopok. Melyik el≈ëad√°s √©rdekel legink√°bb?',
        'Program: d√©lel≈ëtt 9:05-t√≥l el≈ëad√°sok, d√©lut√°n 13:15-t≈ël workshopok. K√©rsz r√©szletet valamelyik workshopr√≥l?',
        'Teljes napos program november 20-√°n a B√°ln√°ban. Seg√≠tsek id≈ëbeoszt√°st tervezni?'
      ];
      return responses[Math.floor(Math.random() * responses.length)] + (shouldMentionTickets ? ' (Super Early Bird √°rak szeptember 30-ig!)' : '');
    }

    // El≈ëad√≥k
    if (input.includes('el≈ëad√≥') || input.includes('speaker') || input.includes('ki besz√©l')) {
      const responses = [
        'El≈ëad√≥ink: Lisa Kleinman (Make.com), Caio Moretti (grupoQ), N√©meth G√°bor (Amazing AI), Balogh Csaba (HVG) √©s m√°sok. K√©rsz r√©szleteket valamelyik el≈ëad√°sr√≥l?',
        'Nemzetk√∂zi √©s hazai AI-szak√©rt≈ëk besz√©lnek. √ârdekel valamelyik el≈ëad√≥ h√°ttere?',
        'Kiv√°l√≥ speaker lineup: AI-√ºgyn√∂kt≈ël m≈±v√©szetig. Melyik t√©mak√∂r vonz√≥?'
      ];
      return responses[Math.floor(Math.random() * responses.length)];
    }

    // Jegyek / √°rak - friss√≠tett Super Early Bird √°rak
    if (input.includes('jegy') || input.includes('√°r') || input.includes('k√∂lts√©g') || input.includes('mennyibe')) {
      return 'Super Early Bird √°rak szeptember 30-ig: BASIC 29.950 Ft+√°fa, PR√âMIUM 34.950 Ft+√°fa, VIP 59.500 Ft+√°fa. Melyik jegyt√≠pus lenne ide√°lis sz√°modra? üéüÔ∏è';
    }

    // Helysz√≠n
    if (input.includes('helysz√≠n') || input.includes('hol') || input.includes('c√≠m') || input.includes('b√°lna')) {
      const responses = [
        'Helysz√≠n: B√°lna, Budapest, F≈ëv√°m t√©r 11-12, 1093. Seg√≠tsek √∫tvonalat tervezni?',
        'A B√°lna √©p√ºlet√©ben lesz√ºnk, F≈ëv√°m t√©ren. Kell parkol√°si tipp is?',
        'K√∂zponti helysz√≠n a Duna-parton. √ârdekl≈ëdn√©l k√∂zleked√©si inf√≥ ir√°nt?'
      ];
      return responses[Math.floor(Math.random() * responses.length)];
    }

    // √âttermek
    if (input.includes('√©tterem') || input.includes('eb√©d') || input.includes('vacsora')) {
      const responses = [
        'Top helyek: Esetleg Bisztr√≥ (panor√°ma), Fakan√°l (4000-6000 Ft), EscoBar & Cafe (pizza is). Foglaljak asztalt valahol?',
        'K√∂zelben: Rombusz √âtterem (eleg√°ns), Petruska √©tkezde (h√°zias magyar). Kell allerg√©n inform√°ci√≥?',
        'V√°logat√°s: modern eur√≥pai, magyar h√°zias, √∂nkiszolg√°l√≥ opci√≥k. √ârdekel m√©g m√°s k√∂rny√©kbeli hely?'
      ];
      return responses[Math.floor(Math.random() * responses.length)];
    }

    // Parkol√°s
    if (input.includes('parkol') || input.includes('parkol√≥') || input.includes('m√©lygar√°zs') || input.includes('utcai')) {
      const responses = [
        'B√°lna m√©lygar√°zs 350 Ft/√≥ra (legk√∂zelebb), vagy k√∂rny√©kbeli parkol√≥k. Seg√≠tsek d√∂nteni a parkol√°si opci√≥ban?',
        'T√∂bb opci√≥: m√©lygar√°zs, Csarnok Parkol√≥, utcai z√≥n√°s. K√©rsz √∫tvonal-tippet is?',
        'Parkol√°s IX. ker√ºleti A z√≥na (600 Ft/√≥ra) vagy fedett gar√°zsok. √ârdekel a k√∂z√∂ss√©gi k√∂zleked√©s is?'
      ];
      return responses[Math.floor(Math.random() * responses.length)];
    }

    // Dress code
    if (input.includes('dress') || input.includes('√∂lt√∂zet') || input.includes('ruha') || input.includes('viselet')) {
      const responses = [
        'Business casual aj√°nlott - k√©nyelmes, m√©gis professzion√°lis. Kell konkr√©t √∂lt√∂zk√∂d√©si tipp?',
        'Ing/bl√∫z + chino/sz√∂vetnadr√°g, opcion√°lis bl√©zer. Vannak k√©rd√©sek a business casual-lel kapcsolatban?',
        'Laza eleganci√°ra t√∂rekedj - k√©nyelmes, de sz√©p. Seg√≠tsek outfit √∂tletekkel?'
      ];
      return responses[Math.floor(Math.random() * responses.length)];
    }

    // Workshopok
    if (input.includes('workshop') || input.includes('m≈±hely') || input.includes('gyakorlat')) {
      const responses = [
        'D√©lut√°ni workshopok: AI-csapatom, No-code automatiz√°ci√≥, Voice AI, Copywriter 2.0 stb. Melyik t√©mak√∂r lenne sz√°modra legink√°bb hasznos?',
        'Gyakorlati foglalkoz√°sok 13:15-t≈ël: kreativit√°s, hat√©konys√°g, marketing, automatiz√°ci√≥. K√©rd√©sek vannak a gyakorlati r√©szekkel kapcsolatban?',
        '8 p√°rhuzamos workshop d√©lut√°n - mindegyik hands-on. √ârdekel m√°s workshop is?'
      ];
      return responses[Math.floor(Math.random() * responses.length)];
    }

    // Networking
    if (input.includes('networking') || input.includes('kapcsolat') || input.includes('ismerked√©s')) {
      const responses = [
        'Networking minden jegyt√≠pusban, VIP-n√©l exkluz√≠v lounge. √ârdekel a VIP networking?',
        'Remek lehet≈ës√©g kapcsolat√©p√≠t√©sre! K√©rsz tippeket az ismerked√©shez?',
        'Sz√ºnetek √©s VIP area ide√°lis networking-re. Seg√≠tsek strat√©gi√°t tervezni?'
      ];
      return responses[Math.floor(Math.random() * responses.length)];
    }

    // Alap√©rtelmezett, v√°ltozatos v√°laszok
    const generalResponses = [
      'Sz√≠vesen seg√≠tek tov√°bbi k√©rd√©sekkel! Miben tudok m√©g seg√≠teni?',
      'K√∂szi a k√©rd√©st! Van m√°s k√©rd√©s?',
      'Tov√°bbi inf√≥ kell? √ârdekel valami konkr√©t t√©ma?'
    ];
    return generalResponses[Math.floor(Math.random() * generalResponses.length)] + (shouldMentionTickets ? ' (Jegyv√°s√°rl√°s szeptember 3-√°n ny√≠lik!)' : '');
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="fixed bottom-6 right-6 z-50">
      {/* Chat Window */}
      {isOpen && (
        <Card className="mb-4 w-96 h-[500px] flex flex-col shadow-chatbot border-primary/30 bg-gradient-chatbot backdrop-blur-xl">
          {/* Header */}
          <div className="flex items-center justify-between p-4 bg-card border-b border-primary/20 rounded-t-lg">
            <div className="flex items-center gap-3">
              <div className="w-3 h-3 bg-primary rounded-full animate-pulse shadow-sm shadow-primary/50"></div>
              <div>
                <span className="font-bold text-foreground text-sm">AI Talks</span>
                <div className="text-xs text-muted-foreground">Asszisztens</div>
              </div>
            </div>
            <Button 
              variant="ghost" 
              size="sm"
              className="text-muted-foreground hover:text-foreground hover:bg-muted/50 h-8 w-8 p-0"
              onClick={() => setIsOpen(false)}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          {/* Messages */}
          <div className="flex-1 p-4 overflow-y-auto space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={cn(
                  'flex',
                  message.isBot ? 'justify-start' : 'justify-end'
                )}
              >
                <div
                  className={cn(
                    'max-w-[80%] p-3 rounded-xl transition-smooth',
                    message.isBot
                      ? 'bg-card text-foreground border border-primary/20 shadow-sm'
                      : 'bg-primary text-primary-foreground shadow-md shadow-primary/25'
                  )}
                >
                  <p className="text-sm leading-relaxed font-medium">{message.text}</p>
                  <span className={cn(
                    "text-xs mt-1 block",
                    message.isBot ? "text-muted-foreground" : "text-primary-foreground/70"
                  )}>
                    {message.timestamp.toLocaleTimeString('hu-HU', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </span>
                </div>
              </div>
            ))}
            
            {/* Typing indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-card border border-primary/20 p-3 rounded-xl shadow-sm">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-primary/20">
            <div className="flex gap-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="K√©rdezz b√°rmit az AI Talks-r√≥l..."
                className="flex-1 bg-muted/50 border-primary/30 text-foreground placeholder:text-muted-foreground focus:border-primary focus:bg-muted/70 transition-smooth"
              />
              <Button 
                onClick={handleSendMessage}
                disabled={!inputValue.trim()}
                className="bg-gradient-primary hover:shadow-glow transition-smooth disabled:opacity-50"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </Card>
      )}

      {/* Toggle Button - only visible when closed */}
      {!isOpen && (
        <Button
          onClick={() => setIsOpen(true)}
          className="h-14 w-14 rounded-full shadow-chatbot transition-bounce bg-gradient-primary text-primary-foreground hover:shadow-glow"
        >
          <MessageCircle className="h-6 w-6" />
        </Button>
      )}

    </div>
  );
};