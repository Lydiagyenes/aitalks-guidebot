import React, { useState, useRef, useEffect } from 'react';
import { MessageCircle, X, Send } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card } from '@/components/ui/card';
import { cn } from '@/lib/utils';

interface Message {
  id: string;
  text: string;
  isBot: boolean;
  timestamp: Date;
}

export const ChatbotWidget = () => {
  const [isOpen, setIsOpen] = useState(true);
  const [messages, setMessages] = useState<Message[]>([
    {
      id: '1',
      text: 'Szia! √ân vagyok az AI Talks asszisztensed! ü§ñ Jegyv√°s√°rl√°s szeptember 3-√°n ny√≠lik, konferencia november 20-√°n lesz Budapesten. Miben seg√≠thetek? Jegyek, program, workshopok, parkol√°s, √©ttermek? üöÄ',
      isBot: true,
      timestamp: new Date()
    }
  ]);
  const [inputValue, setInputValue] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  const handleSendMessage = async () => {
    if (!inputValue.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputValue,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputValue('');
    setIsTyping(true);

    // Get AI response using Gemini
    setTimeout(async () => {
      try {
        const responseText = await getAIResponse(inputValue);
        const botMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: responseText,
          isBot: true,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, botMessage]);
      } catch (error) {
        console.error('Error getting AI response:', error);
        const errorMessage: Message = {
          id: (Date.now() + 1).toString(),
          text: 'Eln√©z√©st, pillanatnyilag nem tudok v√°laszolni. K√©rlek, pr√≥b√°ld √∫jra k√©s≈ëbb! üîÑ',
          isBot: true,
          timestamp: new Date()
        };
        setMessages(prev => [...prev, errorMessage]);
      } finally {
        setIsTyping(false);
      }
    }, 1500);
  };

  const getAIResponse = async (userInput: string): Promise<string> => {
    try {
      const { supabase } = await import('@/integrations/supabase/client');
      
      const { data, error } = await supabase.functions.invoke('gemini-chat', {
        body: { message: userInput }
      });

      if (error) {
        console.error('Supabase function error:', error);
        return getFallbackResponse(userInput);
      }

      return data?.response || getFallbackResponse(userInput);
    } catch (error) {
      console.error('Error calling Gemini:', error);
      return getFallbackResponse(userInput);
    }
  };

  const getFallbackResponse = (userInput: string): string => {
    const input = userInput.toLowerCase();

    // Program / id≈ëpont
    if (input.includes('program') || input.includes('menetrend') || input.includes('id≈ëpont') || input.includes('mikor')) {
      return 'Az AI Talks jegyv√°s√°rl√°sa szeptember 3-√°n ny√≠lik, a konferencia november 20-√°n lesz Budapesten. D√©lel≈ëtt el≈ëad√°sok, d√©lut√°n p√°rhuzamos, gyakorlati workshopok. K√©rsz aj√°nl√°st, melyik program lenne sz√°modra a leghasznosabb? üíº';
    }

    // El≈ëad√≥k
    if (input.includes('el≈ëad√≥') || input.includes('speaker') || input.includes('ki besz√©l')) {
      return 'El≈ëad√≥ink t√∂bbek k√∂z√∂tt: Lisa Kleinman (Make.com), Caio Moretti (grupoQ), N√©meth G√°bor (Amazing AI), Balogh Csaba (HVG), W. Szab√≥ P√©ter (Tengr.ai), Szauder D√°vid (MOME). K√©rsz r√©szleteket valamelyik el≈ëad√°sr√≥l? üé§';
    }

    // Jegyek / √°rak
    if (input.includes('jegy') || input.includes('√°r') || input.includes('k√∂lts√©g') || input.includes('mennyibe')) {
      return 'Jegyek: Early Bird 89.000 Ft, Standard 129.000 Ft, VIP 199.000 Ft (exkluz√≠v networking). Melyik opci√≥ √©rdekel? üéüÔ∏è';
    }

    // Helysz√≠n
    if (input.includes('helysz√≠n') || input.includes('hol') || input.includes('c√≠m') || input.includes('b√°lna')) {
      return 'Helysz√≠n: Budapest (pontos√≠t√°s hamarosan). Ha a B√°lna k√∂rny√©ke fel√© j√∂ssz, sz√≠vesen adok √©tterem √©s parkol√°si tippeket is! üìç';
    }

    // √âttermek
    if (input.includes('√©tterem') || input.includes('eb√©d') || input.includes('vacsora')) {
      return 'Aj√°nlott helyek a B√°lna / F≈ëv√°m t√©r k√∂rny√©k√©n:\n‚Ä¢ Esetleg Bisztr√≥ ‚Äì modern eur√≥pai, panor√°ma (√°rak/allerg√©n nem jel√∂lt).\n‚Ä¢ Rombusz √âtterem ‚Äì eleg√°ns, panor√°ma.\n‚Ä¢ Petruska √©tkezde ‚Äì h√°zias magyar, napi aj√°nlat.\n‚Ä¢ Fakan√°l √âtterem ‚Äì √∂nkiszolg√°l√≥, 4000‚Äì6000 Ft, allerg√©n k√≥dok.\n‚Ä¢ EscoBar & Cafe ‚Äì magyar/nemzetk√∂zi + pizza. Foglaljak neked asztalt aj√°nl√°ssal? üçΩÔ∏è';
    }

    // Parkol√°s
    if (input.includes('parkol') || input.includes('parkol√≥') || input.includes('m√©lygar√°zs') || input.includes('utcai')) {
      return 'Parkol√°s: B√°lna m√©lygar√°zs 350 Ft/√≥ra; Csarnok Parkol√≥ (3‚Äì4 perc s√©ta); Care Park Liliom (10‚Äì12 perc). Utc√°n: IX. ker. "A" z√≥na 600 Ft/√≥ra, h√©tv√©g√©n ingyenes. Seg√≠tsek √∫tvonalat tervezni? üöó';
    }

    // Dress code
    if (input.includes('dress') || input.includes('√∂lt√∂zet') || input.includes('ruha') || input.includes('viselet')) {
      return 'Aj√°nlott viselet: business casual. Uraknak: ing/gall√©ros p√≥l√≥, chino/s√∂t√©t farmer, opci√≥ bl√©zer, eleg√°ns cip≈ë vagy letisztult sneaker. H√∂lgyeknek: bl√∫z/pul√≥ver/top, sz√∂vetnadr√°g/szoknya/ruha, kieg√©sz√≠t≈ë bl√©zer/kardig√°n, k√©nyelmes eleg√°ns cip≈ë. A l√©nyeg a k√©nyelem √©s a professzion√°lis hat√°s. üëîüëó';
    }

    // Allerg√©nek
    if (input.includes('allerg√©n') || input.includes('glut√©n') || input.includes('lakt√≥z')) {
      return 'T√∂bb k√∂rny√©kbeli √©tterem online √©tlapj√°n nincs r√©szletes allerg√©n-jel√∂l√©s. Biztons√°g kedv√©√©rt javasolt el≈ëre r√°k√©rdezni telefonon/e-mailben. Szeretn√©l el√©rhet≈ës√©get egy v√°lasztott helyhez? ‚ö†Ô∏è';
    }

    // Networking
    if (input.includes('networking') || input.includes('kapcsolat') || input.includes('ismerked√©s')) {
      return 'Networking: minden jeggyel van r√° lehet≈ës√©g, VIP-n√©l exkluz√≠v lounge √©s k√ºl√∂n programok. Szeretn√©l VIP inf√≥kat? ü§ù';
    }

    // Mi√©rt √©ri meg?
    if (input.includes('mi√©rt') || input.includes('√©rdemes') || input.includes('el≈ëny') || input.includes('haszon')) {
      return 'Nem elm√©let, hanem azonnal alkalmazhat√≥ tud√°s, val√≥s magyar esettanulm√°nyok √©s AI-√ºgyn√∂k/workflow megold√°sok ‚Äì HVG & Amazing AI pr√©mium min≈ës√©gben. üí°';
    }

    // Workshopok
    if (input.includes('workshop') || input.includes('m≈±hely') || input.includes('gyakorlat')) {
      return 'D√©lut√°ni workshopok: AI-csapatom (Amazing AI), K√≥dolt kreativit√°s (B√©res), No-code automatiz√°ci√≥ (Supercharge), Human 2.0 (NEXT), Vizu√°lis anyagok AI-jal (Just Bee Digital), Copywriter 2.0 (Amazing AI), Voice AI (AI Squad). Melyik √©rdekel? üõ†Ô∏è';
    }

    // Szervez≈ëk
    if (input.includes('hvg') || input.includes('amazing') || input.includes('szervez≈ë')) {
      return 'Szervez≈ëk: HVG & Amazing AI ‚Äì min≈ës√©gi tartalom √©s gyakorlati megk√∂zel√≠t√©s. üèÜ';
    }

    // Alap√©rtelmezett, sales-orient√°lt v√°lasz
    return 'K√∂sz√∂n√∂m a k√©rd√©sed! Az AI Talks jegyv√°s√°rl√°sa szeptember 3-√°n ny√≠lik, a konferencia november 20-√°n lesz Budapesten ‚Äì korl√°tozott idej≈± kedvezm√©nyekkel. Melyik t√©m√°r√≥l k√ºldjek r√©szletes inf√≥t: jegyek, program, workshopok, parkol√°s vagy √©ttermek? ‚ú®';
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="fixed bottom-6 right-6 z-50">
      {/* Chat Window */}
      {isOpen && (
        <Card className="mb-4 w-96 h-[500px] flex flex-col shadow-chatbot border-primary/30 bg-gradient-chatbot backdrop-blur-xl">
          {/* Header */}
          <div className="flex items-center justify-between p-4 bg-card border-b border-primary/20 rounded-t-lg">
            <div className="flex items-center gap-3">
              <div className="w-3 h-3 bg-primary rounded-full animate-pulse shadow-sm shadow-primary/50"></div>
              <div>
                <span className="font-bold text-foreground text-sm">AI Talks</span>
                <div className="text-xs text-muted-foreground">Asszisztens</div>
              </div>
            </div>
            <Button 
              variant="ghost" 
              size="sm"
              className="text-muted-foreground hover:text-foreground hover:bg-muted/50 h-8 w-8 p-0"
              onClick={() => setIsOpen(false)}
            >
              <X className="h-4 w-4" />
            </Button>
          </div>

          {/* Messages */}
          <div className="flex-1 p-4 overflow-y-auto space-y-4">
            {messages.map((message) => (
              <div
                key={message.id}
                className={cn(
                  'flex',
                  message.isBot ? 'justify-start' : 'justify-end'
                )}
              >
                <div
                  className={cn(
                    'max-w-[80%] p-3 rounded-xl transition-smooth',
                    message.isBot
                      ? 'bg-card text-foreground border border-primary/20 shadow-sm'
                      : 'bg-primary text-primary-foreground shadow-md shadow-primary/25'
                  )}
                >
                  <p className="text-sm leading-relaxed font-medium">{message.text}</p>
                  <span className={cn(
                    "text-xs mt-1 block",
                    message.isBot ? "text-muted-foreground" : "text-primary-foreground/70"
                  )}>
                    {message.timestamp.toLocaleTimeString('hu-HU', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </span>
                </div>
              </div>
            ))}
            
            {/* Typing indicator */}
            {isTyping && (
              <div className="flex justify-start">
                <div className="bg-card border border-primary/20 p-3 rounded-xl shadow-sm">
                  <div className="flex gap-1">
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Input */}
          <div className="p-4 border-t border-primary/20">
            <div className="flex gap-2">
              <Input
                value={inputValue}
                onChange={(e) => setInputValue(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="K√©rdezz b√°rmit az AI Talks-r√≥l..."
                className="flex-1 bg-muted/50 border-primary/30 text-foreground placeholder:text-muted-foreground focus:border-primary focus:bg-muted/70 transition-smooth"
              />
              <Button 
                onClick={handleSendMessage}
                disabled={!inputValue.trim()}
                className="bg-gradient-primary hover:shadow-glow transition-smooth disabled:opacity-50"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </Card>
      )}

    </div>
  );
};